plugins {
    id 'fabric-loom' version '0.9-SNAPSHOT'
    id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

loom {
    accessWidenerPath = file "src/main/resources/forest.accesswidener"

    runs {
        forestClient {
            client()
            ideConfigGenerated project.rootProject == project
            name = "Testmod Client"
            source sourceSets.main
        }
        forestServer {
            server()
            ideConfigGenerated project.rootProject == project
            name = "Testmod Server"
            source sourceSets.main
        }
        data {
            client()
            name = "Data Generator"

            defaultMainClass("net.minecraft.data.Main")

            //vmArgs = "-Dfabric.autoTest"
            List<String> args = getVmArgs()
            args.add("-Ddatagenerator=true")
            args.add("-Dinput=" + file('src/generated/resources'))
            args.add("-Doutput=" + file('src/generated/resources'))
            vmArgs(args)
            /*vmArgs(
                    "-Ddatagenerator=true",
                    "-Dinput=" + file('src/generated/resources',
                    "-Doutput=" + file('src/generated/resources'
            )))*/
            //programArgs("net.minecraft.data.Main", "--help")

            /*args = ['--mod', 'forest', '--all',
                    '--existing', '"' + file('src/main/resources/') + '"',
                    '--existing', '"' + file('src/generated/resources/') + '"',
                    '--output', '"' + file('src/generated/resources') + '"']*/
            //args '--mod'
        }
        /*data {
            //workingDirectory project.file('run')

            defaultMainClass = "net.minecraft.data.Main"

            environment = ""
            minecraft {
                dependencies = defaultTasks("")
            }
            /*mods {

            }*/
            /*args = ['--mod', 'forest', '--all',
                    '--existing', '"' + file('src/main/resources/') + '"',
                    '--existing', '"' + file('src/generated/resources/') + '"',
                    '--output', '"' + file('src/generated/resources') + '"']*/
        //}*/
    }
}

idea {
    project {
        languageLevel = '16' // Not sure this is proper or even needed anymore, verify it
    }
}

//java.toolchain.languageVersion = '16'

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
    // You may need to force-disable transitiveness on them.
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

jar {
    from "LICENSE"
}

sourceSets {
    main {
        resources {
            srcDir 'src/generated/resources'
        }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        // mavenLocal()
    }
}
